{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "checksum": "48770f8b5f5d3062d3badd51fcafc401",
     "grade": false,
     "grade_id": "cell-a6c4f74309fc2379",
     "locked": true,
     "schema_version": 1,
     "solution": false
    }
   },
   "source": [
    "# Assignment 4\n",
    "## Description\n",
    "In this assignment you must read in a file of metropolitan regions and associated sports teams from [assets/wikipedia_data.html](assets/wikipedia_data.html) and answer some questions about each metropolitan region. Each of these regions may have one or more teams from the \"Big 4\": NFL (football, in [assets/nfl.csv](assets/nfl.csv)), MLB (baseball, in [assets/mlb.csv](assets/mlb.csv)), NBA (basketball, in [assets/nba.csv](assets/nba.csv) or NHL (hockey, in [assets/nhl.csv](assets/nhl.csv)). Please keep in mind that all questions are from the perspective of the metropolitan region, and that this file is the \"source of authority\" for the location of a given sports team. Thus teams which are commonly known by a different area (e.g. \"Oakland Raiders\") need to be mapped into the metropolitan region given (e.g. San Francisco Bay Area). This will require some human data understanding outside of the data you've been given (e.g. you will have to hand-code some names, and might need to google to find out where teams are)!\n",
    "\n",
    "For each sport I would like you to answer the question: **what is the win/loss ratio's correlation with the population of the city it is in?** Win/Loss ratio refers to the number of wins over the number of wins plus the number of losses. Remember that to calculate the correlation with [`pearsonr`](https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.pearsonr.html), so you are going to send in two ordered lists of values, the populations from the wikipedia_data.html file and the win/loss ratio for a given sport in the same order. Average the win/loss ratios for those cities which have multiple teams of a single sport. Each sport is worth an equal amount in this assignment (20%\\*4=80%) of the grade for this assignment. You should only use data **from year 2018** for your analysis -- this is important!\n",
    "\n",
    "## Notes\n",
    "\n",
    "1. Do not include data about the MLS or CFL in any of the work you are doing, we're only interested in the Big 4 in this assignment.\n",
    "2. I highly suggest that you first tackle the four correlation questions in order, as they are all similar and worth the majority of grades for this assignment. This is by design!\n",
    "3. It's fair game to talk with peers about high level strategy as well as the relationship between metropolitan areas and sports teams. However, do not post code solving aspects of the assignment (including such as dictionaries mapping areas to teams, or regexes which will clean up names).\n",
    "4. There may be more teams than the assert statements test, remember to collapse multiple teams in one city into a single value!"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "checksum": "369ff9ecf0ee04640574205cbc697f94",
     "grade": false,
     "grade_id": "cell-712b2b5da63d4505",
     "locked": true,
     "schema_version": 1,
     "solution": false
    }
   },
   "source": [
    "## Question 1\n",
    "For this question, calculate the win/loss ratio's correlation with the population of the city it is in for the **NHL** using **2018** data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "deletable": false,
    "nbgrader": {
     "checksum": "1cac4803b02502929f5b1612d48db2b5",
     "grade": false,
     "grade_id": "cell-69b16e4386e58030",
     "locked": false,
     "schema_version": 1,
     "solution": true
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.006949873794914276"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import scipy.stats as stats\n",
    "import re\n",
    "\n",
    "def nhl_correlation(): \n",
    "    # YOUR CODE HERE\n",
    "    #NOTE!: I did the fourth question first since I know nfl teams better\n",
    "    nhl_df=pd.read_csv(\"assets/nhl.csv\")\n",
    "    cities=pd.read_html(\"assets/wikipedia_data.html\")[1]\n",
    "    cities=cities.iloc[:-1,[0,3,5,6,7,8]]\n",
    "    \n",
    "    nhl_df = nhl_df[nhl_df['year'] == 2018]\n",
    "    \n",
    "    #drop irrelevant rows\n",
    "    #create 'W-L%' column in 'nhl_df' then filter to 2 columns needed for analysis for both data sets\n",
    "    nhl_df.drop([0, 9, 18, 26], inplace=True)\n",
    "    w= nhl_df['W'].values\n",
    "    l= nhl_df['L'].values\n",
    "    l= l.astype(np.int)\n",
    "    w= w.astype(np.int)\n",
    "    a= np.add(w,l)\n",
    "    x= np.divide(w,a)\n",
    "    nhl_df['W-L%'] = x\n",
    "    nhl_df = nhl_df.filter(items= ['team', 'W-L%'])\n",
    "    cities = cities.filter(['Metropolitan area', 'Population (2016 est.)[8]'])\n",
    "    \n",
    "    #sort alphabetically\n",
    "    cities = cities.sort_values(by='Metropolitan area')\n",
    "    nhl_df = nhl_df.sort_values(by=['team'])\n",
    "    \n",
    "    #reset indexes\n",
    "    nhl_df = nhl_df.reset_index()\n",
    "    nhl_df = nhl_df.drop(columns=['index'])\n",
    "    cities = cities.reset_index()\n",
    "    cities = cities.drop(columns=['index'])\n",
    "    \n",
    "    #get rid of special characters in nfl_df dataframe team names but retain\n",
    "    #the win loss ratio column associated with the names\n",
    "    pattern = re.compile('\\w+')\n",
    "    nhl_df['team'] = nhl_df['team'].str.findall(pattern)\n",
    "\n",
    "    #iterate over each value and remove last string in list\n",
    "    #make a function that pops the last word (team name) off the list\n",
    "    #add individual pop() functions for those that did not fit exactly  to the function\n",
    "    def deal(list):\n",
    "        list.pop()\n",
    "        return list\n",
    "    nhl_df['team'].apply(deal)\n",
    "    nhl_df['team'][8].pop()\n",
    "    nhl_df['team'][10].pop()\n",
    "    nhl_df['team'][26].pop()\n",
    "    nhl_df['team'][28].pop()\n",
    "\n",
    "    #iterate over each list value and convert to string with a space for teams\n",
    "    #with two word names and set it permanantly into the DataFrame\n",
    "    def tie(list):\n",
    "        for i in list:\n",
    "            name = \"\"\n",
    "            name += list[0]\n",
    "            if len(list) == 2:\n",
    "                name += \" \" + list[1]\n",
    "        return name\n",
    "    nhl_df['team'] = nhl_df['team'].apply(tie)\n",
    "    \n",
    "    #Format 'W-L%' column to float data type then use groupby to group 'Los Ange\n",
    "    #les' and 'New York' into one row and get the average of each but miss Oakland\n",
    "    #and 'San Francisco' getting grouped together with different names\n",
    "    #nhl_df['W-L%'] = nhl_df['W-L%'].astype(float) #did not need this for nhl_df question\n",
    "    #type(nfl_df['W-L%'][0])\n",
    "    nhl_df = nhl_df['W-L%'].groupby([nhl_df['team']]).mean()\n",
    "    \n",
    "    ####################still might need this code ################################\n",
    "    #add new row/record to match 'cities' entry 'San Fancsisco Bay Area'\n",
    "    #x = pd.Series({'San Francisco Bay Area':0.250})\n",
    "    #nhl_df = nhl_df.append(x)\n",
    "    \n",
    "    ####STILL NEED TO DELETE OAKLAND AND SAN FRANCISCO FROM 'nfl_df'\n",
    "    #go back to dataframe and rename columns/indexes\n",
    "    nhl_df = pd.DataFrame(nhl_df)\n",
    "    nhl_df.index.rename('NHLRegion', inplace=True)\n",
    "    nhl_df.rename(columns={'W-L%':'WinLoss'}, inplace=True)\n",
    "    #nfl_df.drop(['Oakland', 'San Francisco'], inplace=True)\n",
    "    \n",
    "    #RESET INDEX AFTER REMOVING OAKLAND AND SAN FRANCISCO\n",
    "    nhl_df.reset_index(inplace=True)\n",
    "    \n",
    "    #Change nhl_df 'NHLRegion' to match 'cities' dataframe key\n",
    "    #change cities 'Metropolitan area' to match 'nhl_df' key due to hyphen\n",
    "    #problem matching database keys (apparently there is more than one\n",
    "    #type of hyphen length)\n",
    "    nhl_df.at[5, 'NHLRegion'] = 'Charlotte'\n",
    "    nhl_df.at[7, 'NHLRegion'] = 'Denver'\n",
    "    nhl_df.at[27, 'NHLRegion'] = 'Las Vegas'\n",
    "    nhl_df.at[0, 'NHLRegion'] = 'Los Angeles'\n",
    "    nhl_df.at[17, 'NHLRegion'] = 'New York City'\n",
    "    nhl_df.at[18, 'NHLRegion'] = 'New York City'\n",
    "    nhl_df.at[1, 'NHLRegion'] = 'Phoenix'\n",
    "    nhl_df.at[23, 'NHLRegion'] = 'St. Louis'\n",
    "    nhl_df.at[22, 'NHLRegion'] = 'San Francisco Bay Area'\n",
    "    nhl_df.at[24, 'NHLRegion'] = 'Tampa Bay Area'\n",
    "    nhl_df.at[28, 'NHLRegion'] = 'Washington, D.C.'\n",
    "    cities.at[10, 'Metropolitan area'] = 'Dallas'\n",
    "    cities.at[23, 'Metropolitan area'] = 'Florida'\n",
    "    cities.at[25, 'Metropolitan area'] = 'Minnesota'\n",
    "    \n",
    "    #Combine like named teams...be careful of teams that still have regional teams of different\n",
    "    #names still to be accounted for in calculating mean!\n",
    "    \n",
    "    #Still need to combine 'Los Angeles' and 'New York City' teams to get 28 teams to merge with\n",
    "    #cities and find the average of their combined records, so find their indexes first, rather\n",
    "    #crudely\n",
    "    #remember 'New York' is now the 'Islanders' and 'Rangers'! so weighted twice as much\n",
    "    l= list([])\n",
    "    n= list([])\n",
    "    for index, value in nhl_df['NHLRegion'].iteritems():\n",
    "        if value == 'Los Angeles':\n",
    "            l.append(index)\n",
    "        if value == 'New York City':\n",
    "            n.append(index)\n",
    "    #average the cities 'WinLoss' column\n",
    "    na = np.mean([nhl_df['WinLoss'][n[0]], nhl_df['WinLoss'][n[1]], nhl_df['WinLoss'][n[1]]])\n",
    "    la = np.mean([nhl_df['WinLoss'][l[0]], nhl_df['WinLoss'][l[1]]])\n",
    "    \n",
    "    nhl_df.at[l[0], 'WinLoss'] = la\n",
    "    nhl_df.at[n[0], 'WinLoss'] = na\n",
    "    \n",
    "    nhl_df.drop([l[1]], inplace=True)\n",
    "    nhl_df.drop(n[1], inplace=True)\n",
    "    nhl_df.reset_index(drop= True, inplace=True)\n",
    "    \n",
    "    df = pd.merge(nhl_df, cities, left_on= 'NHLRegion', right_on= 'Metropolitan area')\n",
    "\n",
    "    #use correlation function 'stats.pearsonr' and return the value\n",
    "    p = df['Population (2016 est.)[8]']\n",
    "    p = p.values\n",
    "    p = p.astype(np.float)\n",
    "    wl = df['WinLoss']\n",
    "    wl = wl.values\n",
    "    wl = wl.astype(np.float)\n",
    "    #plug in values to question's variables\n",
    "    win_loss_by_region = wl\n",
    "    population_by_region = p\n",
    "    \n",
    "    population_by_region = p # pass in metropolitan area population from cities\n",
    "    win_loss_by_region = wl # pass in win/loss ratio from nhl_df in the same order as cities[\"Metropolitan area\"]\n",
    "    \n",
    "    population_by_region = p # pass in metropolitan area population from cities\n",
    "    win_loss_by_region = wl # pass in win/loss ratio from nhl_df in the same order as cities[\"Metropolitan area\"]\n",
    "    \n",
    "    r = stats.pearsonr(population_by_region, win_loss_by_region)\n",
    "    \n",
    "    #population_by_region = [] # pass in metropolitan area population from cities\n",
    "    #win_loss_by_region = [] # pass in win/loss ratio from nhl_df in the same order as cities[\"Metropolitan area\"]\n",
    "\n",
    "    assert len(population_by_region) == len(win_loss_by_region), \"Q1: Your lists must be the same length\"\n",
    "    assert len(population_by_region) == 28, \"Q1: There should be 28 teams being analysed for NHL\"\n",
    "    \n",
    "    return r[0]\n",
    "    raise NotImplementedError()\n",
    "\n",
    "nhl_correlation()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "checksum": "52a581df513c71153e105b93764cda4b",
     "grade": true,
     "grade_id": "cell-ebe0b2dfe1067e63",
     "locked": true,
     "points": 20,
     "schema_version": 1,
     "solution": false
    }
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "checksum": "988912cae4968d81473f46d783e79c16",
     "grade": false,
     "grade_id": "cell-cb964e690298b71d",
     "locked": true,
     "schema_version": 1,
     "solution": false
    }
   },
   "source": [
    "## Question 2\n",
    "For this question, calculate the win/loss ratio's correlation with the population of the city it is in for the **NBA** using **2018** data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "deletable": false,
    "nbgrader": {
     "checksum": "9394222aafc8ccab0a228098ba0d6010",
     "grade": false,
     "grade_id": "cell-5a5f21279e3d3572",
     "locked": false,
     "schema_version": 1,
     "solution": true
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-0.17636350642182938"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import scipy.stats as stats\n",
    "import re\n",
    "\n",
    "def nba_correlation():\n",
    "    # YOUR CODE HERE\n",
    "    #NOTE!: I did the fourth question first since I know nfl teams better\n",
    "    nba_df=pd.read_csv(\"assets/nba.csv\")\n",
    "    cities=pd.read_html(\"assets/wikipedia_data.html\")[1]\n",
    "    cities=cities.iloc[:-1,[0,3,5,6,7,8]]\n",
    "    \n",
    "    nba_df = nba_df[nba_df['year'] == 2018]\n",
    "    \n",
    "    #drop irrelevant rows\n",
    "    #filter to 2 columns needed for analysis for both data sets\n",
    "    nba_df = nba_df.filter(items= ['team', 'W/L%'])\n",
    "    cities = cities.filter(['Metropolitan area', 'Population (2016 est.)[8]'])\n",
    "    \n",
    "    #sort alphabetically\n",
    "    cities = cities.sort_values(by='Metropolitan area')\n",
    "    nba_df = nba_df.sort_values(by=['team'])\n",
    "    \n",
    "    #reset indexes\n",
    "    nba_df = nba_df.reset_index()\n",
    "    nba_df = nba_df.drop(columns=['index'])\n",
    "    cities = cities.reset_index()\n",
    "    cities = cities.drop(columns=['index'])\n",
    "    \n",
    "    #get rid of special characters in nfl_df dataframe team names but retain\n",
    "    #the win loss ratio column associated with the names\n",
    "    pattern = re.compile('\\w+')\n",
    "    nba_df['team'] = nba_df['team'].str.findall(pattern)\n",
    "    #nba_df['team'] = nba_df['team'].str.strip()\n",
    "    \n",
    "    #iterate over each value and remove last string in list\n",
    "    #make a function that pops the last word (team name) off the list and run it twice for NBA df\n",
    "    #add individual pop() functions for those that did not fit exactly  to the function\n",
    "    def deal(list):\n",
    "        list.pop()\n",
    "        return list\n",
    "    nba_df['team'].apply(deal)\n",
    "    nba_df['team'].apply(deal)\n",
    "    nba_df['team'][24].pop()\n",
    "    \n",
    "     #iterate over each list value and convert to string with a space for teams\n",
    "    #with two word names and set it permanantly into the DataFrame\n",
    "    def tie(list):\n",
    "        for i in list:\n",
    "            name = \"\"\n",
    "            name += list[0]\n",
    "            if len(list) == 2:\n",
    "                name += \" \" + list[1]\n",
    "        return name\n",
    "    nba_df['team'] = nba_df['team'].apply(tie)\n",
    "    \n",
    "    #Format 'W-L%' column to float data type then use groupby to group 'Los Ange\n",
    "    #les' and 'New York' into one row and get the average of each but miss Oakland\n",
    "    #and 'San Francisco' getting grouped together with different names\n",
    "    nba_df['W/L%'] = nba_df['W/L%'].astype(float) #did not need this for nhl_df question\n",
    "    #check -> type(nfl_df['W-L%'][0])\n",
    "    nba_df = nba_df['W/L%'].groupby([nba_df['team']]).mean()\n",
    "    \n",
    "    ####################still might need this code ################################\n",
    "    #add new row/record to match 'cities' entry 'San Fancsisco Bay Area'\n",
    "    #x = pd.Series({'San Francisco Bay Area':0.250})\n",
    "    #nhl_df = nhl_df.append(x)\n",
    "    \n",
    "    #go back to dataframe and rename columns/indexes\n",
    "    nba_df = pd.DataFrame(nba_df)\n",
    "    nba_df.index.rename('NBARegion', inplace=True)\n",
    "    nba_df.rename(columns={'W/L%':'WinLoss'}, inplace=True)\n",
    "    \n",
    "    #RESET INDEX \n",
    "    nba_df.reset_index(inplace=True)\n",
    "    \n",
    "    #Still need to combine 'Los Angeles' and 'New York City' teams to get 28 teams to merge with\n",
    "    #cities and find the average of their combined records, so find their indexes first, rather\n",
    "    #crudely\n",
    "    \n",
    "    l= list([])\n",
    "    for index, value in nba_df['NBARegion'].iteritems():\n",
    "        if value == 'Brooklyn':\n",
    "            l.append(index)\n",
    "        if value == 'New York':\n",
    "            l.append(index)\n",
    "            \n",
    "    #average the cities 'WinLoss' column\n",
    "    m = np.mean([nba_df['WinLoss'][l[0]], nba_df['WinLoss'][l[1]]])\n",
    "    \n",
    "    nba_df.at[[l[1]], 'WinLoss'] = m\n",
    "    \n",
    "    nba_df.drop([l[0]], inplace=True)\n",
    "    nba_df.reset_index(drop= True, inplace=True)\n",
    "    \n",
    "    \n",
    "    #Change nba_df 'NFLRegion' to match 'cities' dataframe key\n",
    "    #change cities 'Metropolitan area' to match 'nba_df' key due to hyphen\n",
    "    #problem \n",
    "    nba_df.at[8, 'NBARegion'] = 'San Francisco Bay Area'\n",
    "    nba_df.at[10, 'NBARegion'] = 'Indianapolis'\n",
    "    nba_df.at[17, 'NBARegion'] = 'New York City'\n",
    "    nba_df.at[26, 'NBARegion'] = 'Salt Lake City'\n",
    "    nba_df.at[27, 'NBARegion'] = 'Washington, D.C.'    \n",
    "    cities.at[10, 'Metropolitan area'] = 'Dallas'\n",
    "    cities.at[23, 'Metropolitan area'] = 'Miami'\n",
    "    cities.at[25, 'Metropolitan area'] = 'Minnesota'\n",
    "    \n",
    "    df = pd.merge(nba_df, cities, left_on= 'NBARegion', right_on= 'Metropolitan area')\n",
    "    \n",
    "    #use correlation function 'stats.pearsonr' and return the value\n",
    "    p = df['Population (2016 est.)[8]']\n",
    "    p = p.values\n",
    "    p = p.astype(np.float)\n",
    "    wl = df['WinLoss']\n",
    "    wl = wl.values\n",
    "    wl = wl.astype(np.float)\n",
    "    #plug in values to question's variables\n",
    "    win_loss_by_region = wl\n",
    "    population_by_region = p\n",
    "    \n",
    "    population_by_region = p # pass in metropolitan area population from cities\n",
    "    win_loss_by_region = wl # pass in win/loss ratio from nhl_df in the same order as cities[\"Metropolitan area\"]\n",
    "    \n",
    "    population_by_region = p # pass in metropolitan area population from cities\n",
    "    win_loss_by_region = wl # pass in win/loss ratio from nhl_df in the same order as cities[\"Metropolitan area\"]\n",
    "    \n",
    "    r = stats.pearsonr(population_by_region, win_loss_by_region)\n",
    "    \n",
    "    #population_by_region = [] # pass in metropolitan area population from cities\n",
    "    #win_loss_by_region = [] # pass in win/loss ratio from nba_df in the same order as cities[\"Metropolitan area\"]\n",
    "\n",
    "    assert len(population_by_region) == len(win_loss_by_region), \"Q2: Your lists must be the same length\"\n",
    "    assert len(population_by_region) == 28, \"Q2: There should be 28 teams being analysed for NBA\"\n",
    "    \n",
    "    return r[0]\n",
    "\n",
    "    raise NotImplementedError()\n",
    "\n",
    "nba_correlation()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "checksum": "bbdeb8eb22f525a34c10dc8798324e42",
     "grade": true,
     "grade_id": "cell-e573b2b4a282b470",
     "locked": true,
     "points": 20,
     "schema_version": 1,
     "solution": false
    }
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "checksum": "1a1a5809f675ca033086422007cd73bd",
     "grade": false,
     "grade_id": "cell-96e15e4335df78f4",
     "locked": true,
     "schema_version": 1,
     "solution": false
    }
   },
   "source": [
    "## Question 3\n",
    "For this question, calculate the win/loss ratio's correlation with the population of the city it is in for the **MLB** using **2018** data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "deletable": false,
    "nbgrader": {
     "checksum": "27e8c0da6c9fa0dffc10488314335b6c",
     "grade": false,
     "grade_id": "cell-33b00fc3f3467b0c",
     "locked": false,
     "schema_version": 1,
     "solution": true
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.15003737475409495"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import scipy.stats as stats\n",
    "import re\n",
    "\n",
    "\n",
    "\n",
    "def mlb_correlation(): \n",
    "    # YOUR CODE HERE\n",
    "    mlb_df=pd.read_csv(\"assets/mlb.csv\")\n",
    "    cities=pd.read_html(\"assets/wikipedia_data.html\")[1]\n",
    "    cities=cities.iloc[:-1,[0,3,5,6,7,8]]\n",
    "\n",
    "    mlb_df = mlb_df[mlb_df['year'] == 2018]\n",
    "    \n",
    "    #drop irrelevant rows\n",
    "    #filter to 2 columns needed for analysis for both data sets\n",
    "    mlb_df = mlb_df.filter(items= ['team', 'W-L%'])\n",
    "    cities = cities.filter(['Metropolitan area', 'Population (2016 est.)[8]'])\n",
    "    \n",
    "    #sort alphabetically\n",
    "    cities = cities.sort_values(by='Metropolitan area')\n",
    "    mlb_df = mlb_df.sort_values(by=['team'])\n",
    "    \n",
    "    #reset indexes\n",
    "    mlb_df = mlb_df.reset_index(drop=True)\n",
    "    #mlb_df = mlb_df.drop(columns=['index'])\n",
    "    cities = cities.reset_index()\n",
    "    cities = cities.drop(columns=['index'])\n",
    "    \n",
    "    #get rid of special characters in nfl_df dataframe team names but retain\n",
    "    #the win loss ratio column associated with the names\n",
    "    pattern = re.compile('\\w+')\n",
    "    mlb_df['team'] = mlb_df['team'].str.findall(pattern)\n",
    "    #mlb_df['team'] = mlb_df['team'].str.strip()\n",
    "    \n",
    "    #iterate over each value and remove last string in list\n",
    "    #make a function that pops the last word (team name) off the list and run it twice for mlb df\n",
    "    #add individual pop() functions for those that did not fit exactly  to the function\n",
    "    def deal(list):\n",
    "        list.pop()\n",
    "        return list\n",
    "    mlb_df['team'].apply(deal)\n",
    "    mlb_df['team'][5].pop()\n",
    "    mlb_df['team'][3].pop()\n",
    "    mlb_df['team'][28].pop()\n",
    "    \n",
    "    #iterate over each list value and convert to string with a space for teams\n",
    "    #with two word names and set it permanantly into the DataFrame\n",
    "    def tie(list):\n",
    "        for i in list:\n",
    "            name = \"\"\n",
    "            name += list[0]\n",
    "            if len(list) == 2:\n",
    "                name += \" \" + list[1]\n",
    "        return name\n",
    "    mlb_df['team'] = mlb_df['team'].apply(tie)\n",
    "    \n",
    "    #Format 'W-L%' column to float data type then use groupby to group 'Los Ange\n",
    "    #les' and 'New York' into one row and get the average of each but miss Oakland\n",
    "    #and 'San Francisco' getting grouped together with different names\n",
    "    mlb_df['W-L%'] = mlb_df['W-L%'].astype(float) #did not need this for nhl_df question\n",
    "    #check -> type(nfl_df['W-L%'][0])\n",
    "    mlb_df = mlb_df['W-L%'].groupby([mlb_df['team']]).mean()\n",
    "    \n",
    "    ####################still might need this code ################################\n",
    "    #add new row/record to match 'cities' entry 'San Fancsisco Bay Area'\n",
    "    #x = pd.Series({'San Francisco Bay Area':0.250})\n",
    "    #nhl_df = nhl_df.append(x)\n",
    "    \n",
    "    #go back to dataframe and rename columns/indexes\n",
    "    mlb_df = pd.DataFrame(mlb_df)\n",
    "    mlb_df.index.rename('MLBRegion', inplace=True)\n",
    "    mlb_df.rename(columns={'W-L%':'WinLoss'}, inplace=True)\n",
    "    \n",
    "    #RESET INDEX \n",
    "    mlb_df.reset_index(inplace=True)\n",
    "    \n",
    "    #Still need to combine 'Los Angeles' and 'New York City' teams to get 28 teams to merge with\n",
    "    #cities and find the average of their combined records, so find their indexes first, rather\n",
    "    #crudely\n",
    "    \n",
    "    l= list([])\n",
    "    for index, value in mlb_df['MLBRegion'].iteritems():\n",
    "        if value == 'San Francisco':\n",
    "            l.append(index)\n",
    "        if value == 'Oakland':\n",
    "            l.append(index)\n",
    "            \n",
    "    #average the cities 'WinLoss' column\n",
    "    m = np.mean([mlb_df['WinLoss'][l[0]], mlb_df['WinLoss'][l[1]]])\n",
    "    \n",
    "    mlb_df.at[[l[1]], 'WinLoss'] = m\n",
    "    \n",
    "    mlb_df.drop([l[0]], inplace=True)\n",
    "    mlb_df.reset_index(drop= True, inplace=True)\n",
    "    \n",
    "    #Change mlb_df 'NFLRegion' to match 'cities' dataframe key\n",
    "    #change cities 'Metropolitan area' to match 'mlb_df' key due to hyphen\n",
    "    #problem \n",
    "    mlb_df.at[7, 'MLBRegion'] = 'Denver'\n",
    "    mlb_df.at[0, 'MLBRegion'] = 'Phoenix'\n",
    "    mlb_df.at[19, 'MLBRegion'] = 'San Francisco Bay Area'\n",
    "    mlb_df.at[25, 'MLBRegion'] = 'Washington, D.C.'\n",
    "    mlb_df.at[21, 'MLBRegion'] = 'St. Louis'\n",
    "    mlb_df.at[15, 'MLBRegion'] = 'New York City'\n",
    "    mlb_df.at[23, 'MLBRegion'] = 'Dallas'\n",
    "    mlb_df.at[22, 'MLBRegion'] =  'Tampa Bay Area'\n",
    "    cities.at[10, 'Metropolitan area'] = 'Dallas'\n",
    "    cities.at[23, 'Metropolitan area'] = 'Miami'\n",
    "    cities.at[25, 'Metropolitan area'] = 'Minnesota'\n",
    "    \n",
    "    df = pd.merge(mlb_df, cities, left_on= 'MLBRegion', right_on= 'Metropolitan area')\n",
    "\n",
    "    #use correlation function 'stats.pearsonr' and return the value\n",
    "    p = df['Population (2016 est.)[8]']\n",
    "    p = p.values\n",
    "    p = p.astype(np.float)\n",
    "    wl = df['WinLoss']\n",
    "    wl = wl.values\n",
    "    wl = wl.astype(np.float)\n",
    "    #plug in values to question's variables\n",
    "    win_loss_by_region = wl\n",
    "    population_by_region = p\n",
    "    \n",
    "    population_by_region = p # pass in metropolitan area population from cities\n",
    "    win_loss_by_region = wl # pass in win/loss ratio from nhl_df in the same order as cities[\"Metropolitan area\"]\n",
    "    \n",
    "    population_by_region = p # pass in metropolitan area population from cities\n",
    "    win_loss_by_region = wl # pass in win/loss ratio from nhl_df in the same order as cities[\"Metropolitan area\"]\n",
    "    \n",
    "    r = stats.pearsonr(population_by_region, win_loss_by_region)\n",
    "    \n",
    "    #population_by_region = [] # pass in metropolitan area population from cities\n",
    "    #win_loss_by_region = [] # pass in win/loss ratio from mlb_df in the same order as cities[\"Metropolitan area\"]\n",
    "\n",
    "    assert len(population_by_region) == len(win_loss_by_region), \"Q3: Your lists must be the same length\"\n",
    "    assert len(population_by_region) == 26, \"Q3: There should be 26 teams being analysed for MLB\"\n",
    "\n",
    "    return r[0]\n",
    "    raise NotImplementedError()\n",
    "mlb_correlation()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "checksum": "cda33b094ba19ccc37a481e0dd29e0bc",
     "grade": true,
     "grade_id": "cell-764d4476f425c5a2",
     "locked": true,
     "points": 20,
     "schema_version": 1,
     "solution": false
    }
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "checksum": "6977a6da9ed6d8b7a0b7e37bbeda709b",
     "grade": false,
     "grade_id": "cell-793df6c04dfb126e",
     "locked": true,
     "schema_version": 1,
     "solution": false
    }
   },
   "source": [
    "## Question 4\n",
    "For this question, calculate the win/loss ratio's correlation with the population of the city it is in for the **NFL** using **2018** data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "deletable": false,
    "nbgrader": {
     "checksum": "c4914ad1e119278ec2bd567c52640b66",
     "grade": false,
     "grade_id": "cell-8ccebc209aeec8d9",
     "locked": false,
     "schema_version": 1,
     "solution": true
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.004282141436393037"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import scipy.stats as stats\n",
    "import re\n",
    "\n",
    "def nfl_correlation(): \n",
    "    # YOUR CODE HERE\n",
    "    nfl_df=pd.read_csv(\"assets/nfl.csv\")\n",
    "    cities=pd.read_html(\"assets/wikipedia_data.html\")[1]\n",
    "    cities=cities.iloc[:-1,[0,3,5,6,7,8]]\n",
    "\n",
    "    #filter to year 2018\n",
    "    nfl_df = nfl_df[nfl_df['year'] == 2018]\n",
    "    \n",
    "    #filter to 2 columns needed for analysis for both data sets\n",
    "    nfl_df = nfl_df.filter(items= ['team', 'W-L%'])\n",
    "    cities = cities.filter(['Metropolitan area', 'Population (2016 est.)[8]'])\n",
    "    \n",
    "    #sort alphabetically\n",
    "    cities = cities.sort_values(by='Metropolitan area')\n",
    "    nfl_df = nfl_df.sort_values(by=['team'])\n",
    "    \n",
    "    #reset indexes\n",
    "    nfl_df = nfl_df.reset_index()\n",
    "    nfl_df = nfl_df.drop(columns=['index'])\n",
    "    cities = cities.reset_index()\n",
    "    cities = cities.drop(columns=['index'])\n",
    "    \n",
    "    #drop unexpected and unneeded rows/records\n",
    "    nfl_df = nfl_df.drop([0,1,2,3,24,25,26,27])\n",
    "    nfl_df = nfl_df.reset_index()\n",
    "    nfl_df = nfl_df.drop(columns=['index'])\n",
    "    \n",
    "    #get rid of special characters in nfl_df dataframe team names but retain\n",
    "    #the win loss ratio column associated with the names\n",
    "    #nfl_df['team']\n",
    "    pattern = re.compile('\\w+')\n",
    "    nfl_df['team'] = nfl_df['team'].str.findall(pattern)\n",
    "    #nfl_df['teammod']\n",
    "    \n",
    "    #COMBINE LOS ANGELES, NEW YORK, AND SAN FRANCISCO TEAMS\n",
    "    #drop 'team' column\n",
    "    #nfl_df.drop(columns='team', inplace=True)\n",
    "    #check access to dataframe value in nfl_df['teammmod']\n",
    "    #print(nfl_df['teammod'][0])\n",
    "    #check type is a list\n",
    "    \n",
    "    #iterate over each value and remove last string in list\n",
    "    #make a function that pops the last word (team name) off the list\n",
    "    #OLD WAY, DEFINE A FUNCTION AND CALL IT\n",
    "    def deal(list):\n",
    "        list.pop()\n",
    "        return list\n",
    "    nfl_df['team'].apply(deal)  \n",
    "    #NEW WAY, THINK EPHEMERAL, IT'S HERE AND NOW IT'S GONE\n",
    "    #the function is written into the apply() method using lambda as arguement\n",
    "    #lambda example -> x = lambda a : a + 10\n",
    "    #nfl_df['teammod'].apply(lambda x: x - x.pop())\n",
    "    \n",
    "    #iterate over each list value and convert to string with a space for teams\n",
    "    #with two word names and set it permanantly into the DataFrame\n",
    "    def tie(list):\n",
    "        for i in list:\n",
    "            name = \"\"\n",
    "            name += list[0]\n",
    "            if len(list) == 2:\n",
    "                name += \" \" + list[1]\n",
    "        return name\n",
    "    nfl_df['team'] = nfl_df['team'].apply(tie)\n",
    "    \n",
    "    #Format 'W-L%' column to float data type then use groupby to group 'Los Ange\n",
    "    #les' and 'New York' into one row and get the average of each but miss Oakland\n",
    "    #and 'San Francisco' getting grouped together with different names\n",
    "    nfl_df['W-L%'] = nfl_df['W-L%'].astype(float)\n",
    "    #type(nfl_df['W-L%'][0])\n",
    "    nfl_df = nfl_df['W-L%'].groupby([nfl_df['team']]).mean()\n",
    "    \n",
    "    #add new row/record to match 'cities' entry 'San Fancsisco Bay Area'\n",
    "    x = pd.Series({'San Francisco Bay Area':0.250})\n",
    "    nfl_df = nfl_df.append(x)\n",
    "    \n",
    "    ####STILL NEED TO DELETE OAKLAND AND SAN FRANCISCO FROM 'nfl_df'\n",
    "    #go back to dataframe and rename columns/indexes\n",
    "    nfl_df = pd.DataFrame(nfl_df)\n",
    "    nfl_df.index.rename('NFLRegion', inplace=True)\n",
    "    nfl_df.rename(columns={0:'WinLoss'}, inplace=True)\n",
    "    nfl_df.drop(['Oakland', 'San Francisco'], inplace=True)\n",
    "    \n",
    "    #RESET INDEX AFTER REMOVING OAKLAND AND SAN FRANCISCO\n",
    "    nfl_df.reset_index(inplace=True)\n",
    "    \n",
    "    #Change nfl_df 'NFLRegion' to match 'cities' dataframe key\n",
    "    #change cities 'Metropolitan area' to match 'nfl_df' key due to hyphen\n",
    "    #problem matching database keys (apparently there is more than one\n",
    "    #type of hyphen length)\n",
    "    nfl_df.at[0, 'NFLRegion'] = 'Phoenix'\n",
    "    nfl_df.at[4, 'NFLRegion'] = 'Charlotte'\n",
    "    #nfl_df.at[8, 'NFLRegion'] = 'Dallas-Fort Worth'\n",
    "    #nfl_df.at[17, 'NFLRegion'] = 'Miami-Fort Lauderdale'\n",
    "    #nfl_df.at[18, 'NFLRegion'] = 'Minneapolis-Saint Paul'\n",
    "    nfl_df.at[19, 'NFLRegion'] = 'Boston'\n",
    "    nfl_df.at[21, 'NFLRegion'] = 'New York City'\n",
    "    nfl_df.at[25, 'NFLRegion'] = 'Tampa Bay Area'\n",
    "    nfl_df.at[26, 'NFLRegion'] = 'Nashville'\n",
    "    nfl_df.at[27, 'NFLRegion'] = 'Washington, D.C.'\n",
    "    cities.at[10, 'Metropolitan area'] = 'Dallas'\n",
    "    cities.at[23, 'Metropolitan area'] = 'Miami'\n",
    "    cities.at[25, 'Metropolitan area'] = 'Minnesota'\n",
    "    df = pd.merge(nfl_df, cities, left_on= 'NFLRegion', right_on= 'Metropolitan area')\n",
    "    \n",
    "    #use correlation function 'stats.pearsonr' and return the value\n",
    "    p = df['Population (2016 est.)[8]']\n",
    "    p = p.values\n",
    "    p = p.astype(np.float)\n",
    "    wl = df['WinLoss']\n",
    "    wl = wl.values\n",
    "    wl = wl.astype(np.float)\n",
    "    #plug in values to question's variables\n",
    "    win_loss_by_region = wl\n",
    "    population_by_region = p\n",
    "    \n",
    "    population_by_region = p # pass in metropolitan area population from cities\n",
    "    win_loss_by_region = wl # pass in win/loss ratio from nfl_df in the same order as cities[\"Metropolitan area\"]\n",
    "    \n",
    "    population_by_region = p # pass in metropolitan area population from cities\n",
    "    win_loss_by_region = wl # pass in win/loss ratio from nfl_df in the same order as cities[\"Metropolitan area\"]\n",
    "\n",
    "    assert len(population_by_region) == len(win_loss_by_region), \"Q4: Your lists must be the same length\"\n",
    "    assert len(population_by_region) == 29, \"Q4: There should be 29 teams being analysed for NFL\"\n",
    "\n",
    "    r = stats.pearsonr(population_by_region, win_loss_by_region)\n",
    "    return r[0]\n",
    "    raise NotImplementedError()\n",
    "nfl_correlation()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "checksum": "e9415d6399aa49e3a1a60813afdefa3b",
     "grade": true,
     "grade_id": "cell-de7b148b9554dbda",
     "locked": true,
     "points": 20,
     "schema_version": 1,
     "solution": false
    }
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "checksum": "b02d5cd3273f561e4ae939bb2a41740c",
     "grade": false,
     "grade_id": "cell-97b49d8639e908c4",
     "locked": true,
     "schema_version": 1,
     "solution": false
    }
   },
   "source": [
    "## Question 5\n",
    "In this question I would like you to explore the hypothesis that **given that an area has two sports teams in different sports, those teams will perform the same within their respective sports**. How I would like to see this explored is with a series of paired t-tests (so use [`ttest_rel`](https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.ttest_rel.html)) between all pairs of sports. Are there any sports where we can reject the null hypothesis? Again, average values where a sport has multiple teams in one region. Remember, you will only be including, for each sport, cities which have teams engaged in that sport, drop others as appropriate. This question is worth 20% of the grade for this assignment."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "deletable": false,
    "nbgrader": {
     "checksum": "6d78c961eb66f8d8c81f06d33ae8f393",
     "grade": false,
     "grade_id": "cell-92f25f44b8d1179f",
     "locked": false,
     "schema_version": 1,
     "solution": true
    }
   },
   "outputs": [
    {
     "ename": "AssertionError",
     "evalue": "The NBA-NHL p-value should be around 0.02",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mAssertionError\u001b[0m                            Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-14-bd22922a198f>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     24\u001b[0m     \u001b[0;32mraise\u001b[0m \u001b[0mNotImplementedError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     25\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 26\u001b[0;31m \u001b[0msports_team_performance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;32m<ipython-input-14-bd22922a198f>\u001b[0m in \u001b[0;36msports_team_performance\u001b[0;34m()\u001b[0m\n\u001b[1;32m     19\u001b[0m     \u001b[0mp_values\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mDataFrame\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m{\u001b[0m\u001b[0mk\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnan\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mk\u001b[0m \u001b[0;32min\u001b[0m \u001b[0msports\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindex\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0msports\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     20\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 21\u001b[0;31m     \u001b[0;32massert\u001b[0m \u001b[0mabs\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mp_values\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mloc\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"NBA\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"NHL\"\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0;36m0.02\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m<=\u001b[0m \u001b[0;36m1e-2\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"The NBA-NHL p-value should be around 0.02\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     22\u001b[0m     \u001b[0;32massert\u001b[0m \u001b[0mabs\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mp_values\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mloc\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"MLB\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"NFL\"\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0;36m0.80\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m<=\u001b[0m \u001b[0;36m1e-2\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"The MLB-NFL p-value should be around 0.80\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     23\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mp_values\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mAssertionError\u001b[0m: The NBA-NHL p-value should be around 0.02"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import scipy.stats as stats\n",
    "import re\n",
    "\n",
    "mlb_df=pd.read_csv(\"assets/mlb.csv\")\n",
    "nhl_df=pd.read_csv(\"assets/nhl.csv\")\n",
    "nba_df=pd.read_csv(\"assets/nba.csv\")\n",
    "nfl_df=pd.read_csv(\"assets/nfl.csv\")\n",
    "cities=pd.read_html(\"assets/wikipedia_data.html\")[1]\n",
    "cities=cities.iloc[:-1,[0,3,5,6,7,8]]\n",
    "\n",
    "def sports_team_performance():\n",
    "    # YOUR CODE HERE\n",
    "    \n",
    "    # Note: p_values is a full dataframe, so df.loc[\"NFL\",\"NBA\"] should be the same as df.loc[\"NBA\",\"NFL\"] and\n",
    "    # df.loc[\"NFL\",\"NFL\"] should return np.nan\n",
    "    sports = ['NFL', 'NBA', 'NHL', 'MLB']\n",
    "    p_values = pd.DataFrame({k:np.nan for k in sports}, index=sports)\n",
    "    \n",
    "    assert abs(p_values.loc[\"NBA\", \"NHL\"] - 0.02) <= 1e-2, \"The NBA-NHL p-value should be around 0.02\"\n",
    "    assert abs(p_values.loc[\"MLB\", \"NFL\"] - 0.80) <= 1e-2, \"The MLB-NFL p-value should be around 0.80\"\n",
    "    return p_values\n",
    "    raise NotImplementedError()\n",
    "\n",
    "sports_team_performance()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "checksum": "2a596ab421a45cc01168d10e8fbb8f89",
     "grade": true,
     "grade_id": "cell-fb4b9cb5ff4570a6",
     "locked": true,
     "points": 20,
     "schema_version": 1,
     "solution": false
    }
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "coursera": {
   "schema_names": [
    "mooc_adswpy_1_v2_assignment4"
   ]
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
